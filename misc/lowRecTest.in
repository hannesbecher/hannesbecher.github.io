// s p 210
initialize() {
    initializeMutationRate(2.36842e-6);
    initializeMutationType("m1", 0.5, "g", -0.4, 0.3);   //  deleterious NS sites (gamma DFE, h=0.5)
//    initializeMutationType("m2", 0.5, "f", 0.0);         //  neutral exon (synonymous sites)
    initializeMutationType("m3", 0.5, "g", -0.022, 0.3); //  deleterious UTR sites (gamma DFE, h=0.5) for UTRs
    initializeMutationType("m4", 0.5, "e", 0.05);   //  advantageous NS mutations
    initializeMutationType("m5", 0.5, "e", 0.0426); //  advantageous UTR mutations 
    initializeMutationType("m6", 0.5, "f", 0.0);         //  neutral intron sites

// don't remove fixed mutations
// (at some point I should try if it is more efficient to allow substitutions,
// but to include them in the check for reverse mutations)
    m1.convertToSubstitution = F;
//    m2.convertToSubstitution = F;
    m3.convertToSubstitution = F;
    m4.convertToSubstitution = F;
    m5.convertToSubstitution = F;
    m6.convertToSubstitution = F;       
    initializeGenomicElementType("g1", c(m1, m4), c(0.99979, 0.00021));   // exons 
    initializeGenomicElementType("g2", c(m3, m5), c(0.999096, 0.000904)); // UTR (0.999096 deleterious, 0.000904 advantageous) 
    initializeGenomicElementType("g3", m6, 1.0);                          // intron and intergenic sequence (100% neutral). 

// scaling factor (corresponding to a pop size of 2500)

	simSc = 532; // assuming reduction of 25%

// Recombination //

	crossRate = 1e-8;  
	genConvRate = 1e-8;
	
	crossFact = 1;
	genConvFact = 1;
	
    // catch undefined division
    if (crossRate == 0 & genConvRate == 0) {
        initializeRecombinationRate(0); // gene conversion is off by default, does not need to be specified
        print("No gene conversion");
    } else {
        // This is the total rate (crossover and gene conversion)
        initializeRecombinationRate(crossRate * crossFact * simSc +
        	genConvRate * genConvFact * simSc);
        // This is the fraction of the total (above) which is gene conversion
        initializeGeneConversion(genConvFact/(genConvFact + crossFact), 440);
    }
// set up chromosome    
    pos = 0;

    for (i in 1:70) {
        initializeGenomicElement(g3, pos, pos + 3999); //intergenic
        pos = pos + 4000;
        initializeGenomicElement(g2, pos, pos + 189); // 5' UTR
        pos = pos + 190;
        
        for (j in 1:4) {
	        initializeGenomicElement(g1, pos, pos + 299); // exon
	        pos = pos + 300;
   	        initializeGenomicElement(g3, pos, pos + 99); // intron
	        pos = pos + 100;     
        }
        initializeGenomicElement(g1, pos, pos + 299); // exon
        pos = pos + 300;
        initializeGenomicElement(g2, pos, pos + 279); // 3' UTR
        pos = pos + 280;

    }
    initializeGenomicElement(g3, pos, pos + 3999); //intergenic


}

// Simulation starts

1 {
    sim.addSubpop(1, 2500);
}

2: late() {
	allMuts = sim.mutations;
	newMuts = allMuts[allMuts.originGeneration == sim.generation];
	
	if (size(newMuts)) {
		genomes = sim.subpopulations.genomes;
		oldMuts = allMuts[allMuts.originGeneration != sim.generation];
		oldMutsPositions = oldMuts.position;
		newMutsPositions = newMuts.position;
		uniquePositions = unique(newMutsPositions, preserveOrder=F);
		overlappingMuts = (size(newMutsPositions) != size(uniquePositions));
		
		for (newMut in newMuts) {
			newMutLocus = newMut.position;
			newMutType = newMut.mutationType;
			oldLocus = oldMuts[oldMutsPositions == newMutLocus];
			// We don't care about the mutation type. Any mutation that happens
			// at a locus will revert any former mutation at that site.
			oldMatched = oldLocus[oldLocus.mutationType == newMutType];
		
			if (size(oldMatched) == 1) {
				containing = genomes[genomes.containsMutations(newMut)];
				containing.removeMutations(newMut);
				containing.removeMutations(oldMatched);
			} else if (overlappingMuts) {
				oldMuts = c(oldMuts, newMut);
				oldMutsPositions = c(oldMutsPositions, newMutLocus);
			}
		}
	}
	
	if (sim.generation%5000 == 0) {
        p1.outputSample(20);
        p1.outputSample(20);
        p1.outputSample(20);    
        p1.outputSample(20);
        p1.outputSample(20);
	}
}
50001 {
	sim.outputFixedMutations();//should be empty
}
